from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3

app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "*"}})  # Разрешить CORS для всех маршрутов API
db_path = '/root/Botsqyzz/users.db'  # Указан путь к вашей базе данных

@app.route('/api/coins/<id>', methods=['GET'])
def get_coins(id):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'balance': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/coins/<id>', methods=['POST'])
def update_coins(id):
    try:
        data = request.get_json()
        coins = data.get('coins')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (coins, id))
        conn.commit()
        cursor.execute('SELECT balance FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'balance': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/level_boss/<id>', methods=['GET'])
def get_level_boss(id):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT level_boss FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'level_boss': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/level_boss/<id>', methods=['POST'])
def update_level_boss(id):
    try:
        data = request.get_json()
        level_boss = data.get('level_boss')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET level_boss = ? WHERE user_id = ?', (level_boss, id))
        conn.commit()
        cursor.execute('SELECT level_boss FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'level_boss': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/count_blows/<id>', methods=['GET'])
def get_count_blows(id):
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT count_blows FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'count_blows': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/count_blows/<id>', methods=['POST'])
def update_count_blows(id):
    try:
        data = request.get_json()
        count_blows = data.get('count_blows')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET count_blows = ? WHERE user_id = ?', (count_blows, id))
        conn.commit()
        cursor.execute('SELECT count_blows FROM users WHERE user_id = ?', (id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            return jsonify({'count_blows': row[0]})
        else:
            return jsonify({'error': 'User not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


